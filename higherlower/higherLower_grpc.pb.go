// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package higherlower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HigherLowerGameClient is the client API for HigherLowerGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HigherLowerGameClient interface {
	// rpc MakeGuess(GuessRequest) returns (GuessResponse);
	GetGameState(ctx context.Context, in *GameState, opts ...grpc.CallOption) (*GameState, error)
}

type higherLowerGameClient struct {
	cc grpc.ClientConnInterface
}

func NewHigherLowerGameClient(cc grpc.ClientConnInterface) HigherLowerGameClient {
	return &higherLowerGameClient{cc}
}

func (c *higherLowerGameClient) GetGameState(ctx context.Context, in *GameState, opts ...grpc.CallOption) (*GameState, error) {
	out := new(GameState)
	err := c.cc.Invoke(ctx, "/higherlower.HigherLowerGame/GetGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HigherLowerGameServer is the server API for HigherLowerGame service.
// All implementations must embed UnimplementedHigherLowerGameServer
// for forward compatibility
type HigherLowerGameServer interface {
	// rpc MakeGuess(GuessRequest) returns (GuessResponse);
	GetGameState(context.Context, *GameState) (*GameState, error)
	mustEmbedUnimplementedHigherLowerGameServer()
}

// UnimplementedHigherLowerGameServer must be embedded to have forward compatible implementations.
type UnimplementedHigherLowerGameServer struct {
}

func (UnimplementedHigherLowerGameServer) GetGameState(context.Context, *GameState) (*GameState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedHigherLowerGameServer) mustEmbedUnimplementedHigherLowerGameServer() {}

// UnsafeHigherLowerGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HigherLowerGameServer will
// result in compilation errors.
type UnsafeHigherLowerGameServer interface {
	mustEmbedUnimplementedHigherLowerGameServer()
}

func RegisterHigherLowerGameServer(s grpc.ServiceRegistrar, srv HigherLowerGameServer) {
	s.RegisterService(&HigherLowerGame_ServiceDesc, srv)
}

func _HigherLowerGame_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HigherLowerGameServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/higherlower.HigherLowerGame/GetGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HigherLowerGameServer).GetGameState(ctx, req.(*GameState))
	}
	return interceptor(ctx, in, info, handler)
}

// HigherLowerGame_ServiceDesc is the grpc.ServiceDesc for HigherLowerGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HigherLowerGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "higherlower.HigherLowerGame",
	HandlerType: (*HigherLowerGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameState",
			Handler:    _HigherLowerGame_GetGameState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "higherlower/higherLower.proto",
}
